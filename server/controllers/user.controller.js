
import asyncHandler from 'express-async-handler';
import jwt from 'jsonwebtoken';
import bcrypt from "bcrypt"
import {User} from '../models/user.model.js';




const generateToken = (user) => {
  return jwt.sign(
    { id: user._id, email: user.email },
    process.env.JWT_SECRET,
    { expiresIn: '830d' }
  );
};

// auth.controller.js
// export const handleGoogleAuth = asyncHandler(async (req, res) => {
//   if (!req.user) {
//     res.status(401);
//     throw new Error('Google authentication failed');
//   }

//   const token = generateToken(req.user);
//   const userData = {
//     _id: req.user._id,
//     name: req.user.name,
//     email: req.user.email,
//     avatar: req.user.avatar,
//     provider: req.user.provider
//   };

//   // For API responses
//   res.status(200).json({
//     success: true,
//     ...userData,
//     token
//   });
// });




export const registerAccount = asyncHandler(async (req, res) => {
  const { username, email, password } = req.body; // Removed confirmPassword

  // 1. Validate required fields (only schema fields)
  if (!username || !email || !password) {
    res.status(400);
    throw new Error("Username, email, and password are required");
  }

  // 2. Check password length (optional but recommended)
  if (password.length < 8) {
    res.status(400);
    throw new Error("Password must be at least 8 characters");
  }

  // 3. Check for existing user (email or username)
  const existingUser = await User.findOne({ 
    $or: [
      { email: email.toLowerCase().trim() },
      { username: username.toLowerCase().trim() }
    ]
  });
  if (existingUser) {
    res.status(400);
    throw new Error("User already exists");
  }

  // 4. Create user (EXACTLY matching your schema)
  const user = new User({
    username: username.toLowerCase().trim(),
    email: email.toLowerCase().trim(),
    password: await bcrypt.hash(password, 10),
    provider: 'local', // Explicitly set (not relying on default)
    // avatar auto-generated by your pre-save hook
  });

  await user.save();

  // 5. Return response (excluding sensitive fields)
   res.status(201).json({
    success: true,
    user: {
      id: user._id,
      username: user.username,
      email: user.email,
      provider: user.provider,
      avatar: user.avatar // Auto-generated initials
    }
  });
});

export const loginAccount = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  // Validate input
  if (!email || !password) {
    return res.status(400).json({ msg: "Email and password are required" });
  }

  // Find user by email
  const user = await User.findOne({ email }).select("+password");
  if (!user) {
    return res.status(401).json({ msg: "User not found" });
  }

  // Compare password
  const isPasswordCorrect = await bcrypt.compare(password, user.password || "");
  if (!isPasswordCorrect) {
    return res.status(401).json({ msg: "Invalid credentials" });
  }

  // Generate token
  const token = generateToken(user);

  // Remove password from response
  const { password: _, ...userData } = user.toObject();

  return res.status(200).json({
    msg: "Login successful",
    token,
      user: {
    ...userData,
    avatar: user.avatar // Include the avatar in response
  },
  });
});


export const getUserByUsername = asyncHandler(async (req, res) => {
  const {username} = req.params;

  const user = await User.findOne({ username: username.toLowerCase().trim() })
    .select('-password -__v'); // Exclude sensitive fields

  if (!user) {
    res.status(404);
    throw new Error('User not found');
  }

  res.status(200).json({
    success: true,
    user
  });
});


export const logout = asyncHandler(async (req, res) => {
  res.cookie('jwt', '', {
    httpOnly: true,
    expires: new Date(0)
  });
  
  res.status(200).json({ message: 'Logged out successfully' });
});




